root@master:~/terraform_test_project/task3# terraform apply
module.network.data.aws_subnets.default_subnet: Refreshing state...
module.network.data.aws_subnet.my_subnet: Refreshing state...

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # null_resource.remote[0] will be created
  + resource "null_resource" "remote" {
      + id = (known after apply)
    }

  # module.ec2-instance.aws_instance.my_test_webserver[0] will be created
  + resource "aws_instance" "my_test_webserver" {
      + ami                                  = "ami-0dcc0ebde7b2e00db"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "my_test_key_pair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = "subnet-007ca475219269771"
      + tags                                 = {
          + "Name"  = "Task3_instance_1"
          + "Owner" = "Ruslan Kasymaliev"
        }
      + tags_all                             = {
          + "Name"  = "Task3_instance_1"
          + "Owner" = "Ruslan Kasymaliev"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "bc32116d12da11b15d3bfc943c08be873e58262a"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.ec2-instance.aws_key_pair.deployer will be created
  + resource "aws_key_pair" "deployer" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "my_test_key_pair"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + public_key      = (known after apply)
      + tags            = {
          + "Name" = "My Key Pair"
        }
      + tags_all        = {
          + "Name" = "My Key Pair"
        }
    }

  # module.ec2-instance.local_file.cloud_pem will be created
  + resource "local_file" "cloud_pem" {
      + content              = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0600"
      + filename             = "cloudtls.pem"
      + id                   = (known after apply)
    }

  # module.ec2-instance.tls_private_key.generated_key will be created
  + resource "tls_private_key" "generated_key" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 2048
    }

  # module.sg.aws_security_group.my_sg will be created
  + resource "aws_security_group" "my_sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "Test SG"
        }
      + tags_all               = {
          + "Name" = "Test SG"
        }
      + vpc_id                 = "vpc-0dd496bf14f381e59"
    }

  # module.sg.aws_security_group_rule.ingress_rules["ftp"] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "192.168.1.0/24",
        ]
      + description              = "ftp"
      + from_port                = 21
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 21
      + type                     = "ingress"
    }

  # module.sg.aws_security_group_rule.ingress_rules["http"] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "http"
      + from_port                = 80
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 80
      + type                     = "ingress"
    }

  # module.sg.aws_security_group_rule.ingress_rules["ssh"] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "158.181.250.3/32",
        ]
      + description              = "ssh"
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # module.sg.aws_security_group_rule.ingress_rules["telnet"] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "192.168.1.0/24",
        ]
      + description              = "telnet"
      + from_port                = 23
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 23
      + type                     = "ingress"
    }

Plan: 10 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + aws_key_pair         = (known after apply)
  + null_resource_output = [
      + (known after apply),
    ]
  + public_ip            = [
      + (known after apply),
    ]
  + sg_id                = [
      + (known after apply),
    ]
  + sg_rule_id           = {
      + ftp    = (known after apply)
      + http   = (known after apply)
      + ssh    = (known after apply)
      + telnet = (known after apply)
    }
  + tls_filename         = "cloudtls.pem"
  + tls_key_id           = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.ec2-instance.tls_private_key.generated_key: Creating...
module.ec2-instance.tls_private_key.generated_key: Creation complete after 0s [id=7752d58a3bd9602f3c138b4244d51cd4a940cc09]
module.ec2-instance.local_file.cloud_pem: Creating...
module.ec2-instance.local_file.cloud_pem: Creation complete after 0s [id=aaabac0aeec7711a33a63a67ef142f99f0752f70]
module.ec2-instance.aws_key_pair.deployer: Creating...
module.sg.aws_security_group.my_sg: Creating...
module.ec2-instance.aws_key_pair.deployer: Creation complete after 0s [id=my_test_key_pair]
module.sg.aws_security_group.my_sg: Creation complete after 2s [id=sg-08024192affe2c3f1]
module.sg.aws_security_group_rule.ingress_rules["http"]: Creating...
module.sg.aws_security_group_rule.ingress_rules["telnet"]: Creating...
module.ec2-instance.aws_instance.my_test_webserver[0]: Creating...
module.sg.aws_security_group_rule.ingress_rules["ftp"]: Creating...
module.sg.aws_security_group_rule.ingress_rules["ssh"]: Creating...
module.sg.aws_security_group_rule.ingress_rules["ftp"]: Creation complete after 1s [id=sgrule-474692478]
module.sg.aws_security_group_rule.ingress_rules["http"]: Creation complete after 2s [id=sgrule-2145595743]
module.sg.aws_security_group_rule.ingress_rules["telnet"]: Creation complete after 2s [id=sgrule-3800138787]
module.sg.aws_security_group_rule.ingress_rules["ssh"]: Creation complete after 3s [id=sgrule-3137243081]
module.ec2-instance.aws_instance.my_test_webserver[0]: Still creating... [10s elapsed]
module.ec2-instance.aws_instance.my_test_webserver[0]: Still creating... [20s elapsed]
module.ec2-instance.aws_instance.my_test_webserver[0]: Creation complete after 23s [id=i-070594b4db7d1d21b]
null_resource.remote[0]: Creating...
null_resource.remote[0]: Provisioning with 'remote-exec'...
null_resource.remote[0] (remote-exec): Connecting to remote host via SSH...
null_resource.remote[0] (remote-exec):   Host: 3.71.188.198
null_resource.remote[0] (remote-exec):   User: ec2-user
null_resource.remote[0] (remote-exec):   Password: false
null_resource.remote[0] (remote-exec):   Private key: true
null_resource.remote[0] (remote-exec):   Certificate: false
null_resource.remote[0] (remote-exec):   SSH Agent: false
null_resource.remote[0] (remote-exec):   Checking Host Key: false
null_resource.remote[0] (remote-exec): Connecting to remote host via SSH...
null_resource.remote[0] (remote-exec):   Host: 3.71.188.198
null_resource.remote[0] (remote-exec):   User: ec2-user
null_resource.remote[0] (remote-exec):   Password: false
null_resource.remote[0] (remote-exec):   Private key: true
null_resource.remote[0] (remote-exec):   Certificate: false
null_resource.remote[0] (remote-exec):   SSH Agent: false
null_resource.remote[0] (remote-exec):   Checking Host Key: false
null_resource.remote[0] (remote-exec): Connected!
null_resource.remote[0]: Still creating... [10s elapsed]
null_resource.remote[0] (remote-exec): curl: (7) Failed to connect to localhost port 80 after 0 ms: Connection refused
null_resource.remote[0] (remote-exec): curl: (7) Failed to connect to localhost port 80 after 0 ms: Connection refused
null_resource.remote[0]: Still creating... [20s elapsed]
null_resource.remote[0] (remote-exec): curl: (7) Failed to connect to localhost port 80 after 0 ms: Connection refused
null_resource.remote[0] (remote-exec): curl: (7) Failed to connect to localhost port 80 after 0 ms: Connection refused
null_resource.remote[0]: Still creating... [30s elapsed]
null_resource.remote[0] (remote-exec): SUCCESS
null_resource.remote[0]: Creation complete after 33s [id=8346303643122102238]

Apply complete! Resources: 10 added, 0 changed, 0 destroyed.

Outputs:

aws_key_pair = arn:aws:ec2:eu-central-1:350794364681:key-pair/my_test_key_pair
null_resource_output = [
  "8346303643122102238",
]
public_ip = [
  "3.71.188.198",
]
sg_id = [
  "sg-08024192affe2c3f1",
]
sg_rule_id = {
  "ftp" = "sgrule-474692478"
  "http" = "sgrule-2145595743"
  "ssh" = "sgrule-3137243081"
  "telnet" = "sgrule-3800138787"
}
tls_filename = cloudtls.pem
tls_key_id = 7752d58a3bd9602f3c138b4244d51cd4a940cc09

